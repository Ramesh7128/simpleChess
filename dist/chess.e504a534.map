{"version":3,"sources":["chess.js"],"names":["columns","rows","INIT_WHITE","D1","INIT_BLACK","D8","currentMover","selectedPiece","cells","assignPiece","row","col","id","Piece","forEach","i","j","cell","color","piece","findPossiblePawnPos","obj","findPossibleKnightPos","potentialPos","indexOfObjCol","indexOf","potentialColumns","index","Math","abs","push","name","timesMoved","possiblePositions","move","pos","currentPos","nextPos","split","console","log","renderGame","htmlString","pieceInfo","root","document","getElementById","innerHTML","allCells","querySelectorAll","addEventListener"],"mappings":"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","file":"chess.e504a534.map","sourceRoot":"..","sourcesContent":["// create the board\n//  - 8 * 8 grid \n//  - alternate black and white cells\n//      - starts with white\n//  - Cell\n//    - color\n//    - id\n//    - piece?\n//  - Each square has an id\n// - Arrangement of the board\n//  \n// create a chess object\n//  - unique chess piece keys\n// Pieces\n//  - currentPos (rows, cols)\n//  - possiblePos\n//  - name\n//  - color\n//  - uniqueMoveLogic??\n//  - move - func\n// Conditions\n//  - kill\n//  - Check\n//    - checkmate\n//  - castling\n\nvar columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\nvar rows = [1, 2, 3, 4, 5, 6, 7, 8];\n\nvar INIT_WHITE = {\n  'A1': 'rook', 'B1': 'knight', 'C1': 'bishop', D1: 'king', 'E1': 'queen', 'F1': 'bishop', 'G1': 'knight', 'H1': 'rook',\n  'A2': 'pawn', 'B2': 'pawn', 'C2': 'pawn', 'D2': 'pawn', 'E2': 'pawn', 'F2': 'pawn', 'G2': 'pawn', 'H2': 'pawn',\n}\n\nvar INIT_BLACK = {\n  'A8': 'rook', 'B8': 'knight', 'C8': 'bishop', D8: 'queen', 'E8': 'king', 'F8': 'bishop', 'G8': 'knight', 'H8': 'rook',\n  'A7': 'pawn', 'B7': 'pawn', 'C7': 'pawn', 'D7': 'pawn', 'E7': 'pawn', 'F7': 'pawn', 'G7': 'pawn', 'H7': 'pawn',\n}\n\nvar currentMover = 'white';\n\nvar selectedPiece;\n\nvar cells = {}; // Store of truth \n\nfunction assignPiece(row, col) {\n  var id = col+row;\n\n  if(INIT_WHITE[id]) {\n    return new Piece(INIT_WHITE[id], 'white', row, col)\n  } else if(INIT_BLACK[id]) {\n    return new Piece(INIT_BLACK[id], 'black', row, col)\n  } else {\n    return null;\n  }\n}\n\nrows.forEach((row, i) => {\n  columns.forEach((col, j) => {\n\n    var cell = {\n      color: (i+j) % 2 == 0 ? 'white' : 'black',\n      row: row,\n      col: col,\n      piece: assignPiece(row, col)\n    }\n\n    cells[col+row] = cell;\n  })\n});\n\nfunction findPossiblePawnPos(obj) {\n\n}\n\n// 2 col, 1 row\n// 2 row, 1 col\nfunction findPossibleKnightPos(obj) { // 'A4'\n\n  var potentialPos = [];\n\n  var indexOfObjCol =  columns.indexOf(obj.col);\n\n  var potentialColumns = [];\n\n  columns.forEach((col, index) => {\n    if(Math.abs(index - indexOfObjCol) <= 2 && Math.abs(index - indexOfObjCol) !== 0) {\n      potentialColumns.push(col);\n    }\n  });\n\n  potentialColumns.forEach((col, index) => {\n    if(Math.abs(columns.indexOf(col) - indexOfObjCol) == 2) {\n      (rows.indexOf(obj.row-1) !== -1) ? potentialPos.push(col + (obj.row-1)) : null;\n      (rows.indexOf(obj.row+1) !== -1) ? potentialPos.push(col + (obj.row+1)) : null;\n    } else {\n      (rows.indexOf(obj.row-2) !== -1) ? potentialPos.push(col + (obj.row-2)) : null;\n      (rows.indexOf(obj.row+2) !== -1) ? potentialPos.push(col + (obj.row+2)) : null;\n    }\n  });\n\n  return potentialPos;\n}\n\nfunction findPossiblePawnPos(obj) {\n  \n}\n\n\n\nfunction Piece(name, color, row, col) {\n  this.name = name;\n  this.color = color;\n  this.row = row;\n  this.col = col;\n  this.timesMoved = 0;\n  this.possiblePositions = ['A3', 'A4'];\n  // position - A1\n  // check for validity of move\n  // move.\n  this.move = function(pos) {\n    \n    // TODO:check the validity of move.\n\n    var currentPos = this.col + this.row;\n    var nextPos = pos;\n\n    this.col = nextPos.split('')[0];\n    this.row = nextPos.split('')[1];\n\n    console.log('I am supposed to move to ', nextPos, 'and my current pos is', currentPos);\n\n    // empty the .piece property on the cell object\n    cells[currentPos].piece = null;\n    // set an new .piece prop on the nextPos cell obj\n    // kill logic\n    cells[nextPos].piece = this;\n    \n    // flip the currentMover\n    currentMover = this.color == 'white' ? 'black' : 'white';\n    selectedPiece = null;\n\n    ++this.timesMoved;\n\n    renderGame();\n  }\n}\n\nfunction renderGame() {\n  var htmlString = '';\n  for(var cell in cells) {\n    var pieceInfo = cells[cell].piece ? cells[cell].piece.color + '-' + cells[cell].piece.name : '';\n    htmlString += `<div id=\"${cell}\" class=\"${cells[cell].color} cell\" data-piece=\"${pieceInfo}\"></div>`;\n  }\n\n  var root = document.getElementById('chess-board');\n  root.innerHTML = htmlString;\n\n  //addEventListeners\n  var allCells = document.querySelectorAll('.cell');\n\n  allCells.forEach((cell, index) => {\n    cell.addEventListener('click', () => {\n\n      if(cells[cell.id].piece && (cells[cell.id].piece.color == currentMover)) {\n        selectedPiece = cells[cell.id].piece;\n        return;\n      }\n\n      if(selectedPiece) {\n        selectedPiece.move(cell.id);\n      }\n\n    });\n  })\n}\n\nrenderGame();\n"]}